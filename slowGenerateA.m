function [A,r] = slowGenerateA(q,k)
% the following code is deprecated
%% generate all possible Messages
% helpervectors
h1 = 0:q-1;
h2 = 0:q-1;
% generate all combinations
for i = 1:k-1
    h2 = combvec(h1,h2);
end
% flip upside down required for correct order of output
allMessages = flipud(h2);

%% generate r by excluding MessageVectors which can be generated by scaling another vector
% at first all Vectors are possible so idx is true 
idx = true(1,size(allMessages,2));
% (0,0,...,0) stands on posistion 1 and is not required
idx(1) = false;

% h3 = vector whicelemtwise counting down from 
h3 = (k-1):-1:0;
% powvektor contains (q^(k-1),q^(k-2),...,q^0)
% is needed for index calculation
powVector = (ones(1,k)*q).^h3;

% iterate over all Messages 
for iMsg = 1:length(allMessages)
    % skip excluded MessageIds (continue if not idx at current Position iMsg)
    if  ~idx(iMsg)
        continue;
    end
    % iterate over all possible scale factors 
    % start from 2 because multiply with 1 points to the current
    % messageVector which we want to keep
    for iFactor = 1:q-1
        % calculate scalar product of powvector and scaled messagevector ==
        % position in allMessages
        calculatedIdx = powVector*(mod(allMessages(:,iMsg)*iFactor,q))+1;
        % exclude calculated Idx
        idx(calculatedIdx) = false;
    end
    idx(iMsg) = true;
end
% extract r with idx
% r = matrix holding all pairwise independant messageVectors as colums
r = allMessages(:,idx);

%% Calculate matrix A
% calculate all scalarproducts 
scalarProducts = mod(r'*r,q);

% set A to true (1) where scalar product is 0
A = scalarProducts == 0;

%% Some additional output
% plot pixel image of A
file = strcat('A_q',num2str(q),'_k',num2str(k),'.bmp');
imwrite(A,file);
imagesc(A);
